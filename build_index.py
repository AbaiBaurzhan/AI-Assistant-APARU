"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è FAISS –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π FAQ."""

import asyncio
import logging
from pathlib import Path

from utils.excel_converter import convert_excel_to_vector_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
FAQ_FILE = "data/faq.xlsx"


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ FAQ
        if not Path(FAQ_FILE).exists():
            logger.error(f"–§–∞–π–ª {FAQ_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.info("–°–æ–∑–¥–∞–π—Ç–µ Excel —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'question' –∏ 'answer'")
            return

        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞: {FAQ_FILE}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Excel –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        result = await convert_excel_to_vector_db(FAQ_FILE)

        if result["status"] == "success":
            logger.info("‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['records_processed']}")
            logger.info(f"üìÅ –ò–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result['index_file']}")
            logger.info(f"üìÅ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {result['knowledge_base_file']}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {result['error']}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
