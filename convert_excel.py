"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π."""

import asyncio
import logging
import sys
from pathlib import Path

from utils.excel_converter import convert_excel_to_vector_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–∞."""
    try:
        # –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        excel_file = "data/faq.xlsx"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not Path(excel_file).exists():
            logger.error(f"–§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            logger.info("–°–æ–∑–¥–∞–π—Ç–µ Excel —Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'question' –∏ 'answer'")
            sys.exit(1)

        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ñ–∞–π–ª–∞: {excel_file}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Excel –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        result = await convert_excel_to_vector_db(excel_file)

        if result["status"] == "success":
            logger.info("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['records_processed']}")
            logger.info(f"üìÅ –ò–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result['index_file']}")
            logger.info(f"üìÅ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {result['knowledge_base_file']}")
            logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {result['model_used']}")
            logger.info(f"üìê –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {result['embedding_dimension']}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result['error']}")
            sys.exit(1)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())

