"""–°—Ö–µ–º—ã –¥–ª—è API –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤."""

from typing import List, Optional

from pydantic import BaseModel, Field


class AskRequest(BaseModel):
    """–°—Ö–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞."""

    query: str = Field(
        ..., min_length=1, max_length=1000, description="–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )


class AskResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""

    reply: str = Field(..., description="–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
    confidence: float = Field(
        ..., ge=0.0, le=1.0, description="–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0-1)"
    )
    source: Optional[str] = Field(None, description="ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞")
    similar_questions: List[str] = Field(
        default_factory=list, description="–ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã"
    )


class FeedbackRequest(BaseModel):
    """–°—Ö–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""

    query: str = Field(
        ..., min_length=1, max_length=1000, description="–ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
    )
    answer_id: Optional[str] = Field(None, description="ID –æ—Ç–≤–µ—Ç–∞")
    feedback: str = Field(..., pattern="^(üëç|üëé)$", description="–û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞ (üëç –∏–ª–∏ üëé)")


class FeedbackResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."""

    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    message: str = Field(..., description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")


class HealthResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è."""

    status: str = Field(..., description="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
    search_engine_ready: bool = Field(..., description="–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞")
