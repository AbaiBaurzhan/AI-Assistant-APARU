# Cursor AI Rules - Best Practices для FastAPI проекта

## Основная роль
Ты эксперт по созданию ИИ-ассистентов техподдержки на Python, FastAPI, LangChain, FAISS/Chroma и OpenAI/локальные LLM.
Разрабатывай продакшен-готовый ИИ-сервис для встраивания в существующий чат техподдержки такси-агрегатора.

## Архитектурные принципы
- **Модульность**: Используй функции вместо классов где возможно
- **RORO**: Receive an Object, Return an Object
- **Async-first**: Все I/O операции через async/await
- **Type Safety**: Обязательные type hints везде
- **Error Handling**: HTTPException с понятными сообщениями
- **Logging**: Логируй все важные операции и ошибки

## Структура проекта
```
app/
├── routers/          # API endpoints
├── schemas/          # Pydantic модели
├── utils/            # Утилиты
├── fixtures/         # Тестовые данные
└── main.py          # Точка входа
```

## Стиль кода
- **snake_case** для переменных и функций
- **Говорящие имена**: ride_id, is_default, passenger_name
- **Guard clauses** и early return
- **Максимум 88 символов** в строке
- **Документация** для публичных функций

## FastAPI специфика
- **Pydantic v2** для всех схем
- **response_model** для всех endpoints
- **Dependency injection** для переиспользования
- **Background tasks** для тяжелых операций
- **Middleware** для логирования и CORS

## Безопасность
- **Валидация** всех входных данных
- **Rate limiting** для API
- **CORS** настройки
- **Environment variables** для секретов
- **Input sanitization** для предотвращения инъекций

## Производительность
- **Connection pooling** для БД
- **Caching** для частых запросов
- **Lazy loading** для больших объектов
- **Pagination** для списков
- **Background tasks** для тяжелых операций

## Тестирование
- **Unit tests** для всех функций
- **Integration tests** для API
- **Fixtures** для тестовых данных
- **Mocking** для внешних сервисов
- **Coverage** минимум 80%

## Мониторинг
- **Structured logging** с контекстом
- **Metrics** для производительности
- **Health checks** для сервиса
- **Error tracking** для багов
- **Performance monitoring** для оптимизации

## Цель проекта
Сократить нагрузку на операторов, ускорить ответы, повысить точность и стабильность.
Ассистент должен:
- искать ответы в базе знаний
- при высокой уверенности возвращать готовый ответ
- при низкой уверенности задавать уточнение или передавать диалог оператору

## Важно
При написании кода будь на 100% уверен, что ничего существующего не ломается.
Всегда следуй принципам SOLID, DRY, KISS, YAGNI.
